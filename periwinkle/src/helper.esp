unsigned long breath_speed = 10;
int b_led_step = 0;
unsigned long b_last_time = 0;
bool b_sts = false;
int b_max_step =1020;


//membuat efek bernafas pada LED tanpa memblokir proses apapun
void IRAM_ATTR breathe(int led = LED_BUILTIN){
  //interval delay untuk setiap berapa kali langkah diambil
    if(uptime - b_last_time > breath_speed){
        if(b_sts){
            b_led_step = b_led_step - 10;
        }else{
            b_led_step = b_led_step + 10;
        }
        if(b_led_step < 2){
            b_sts = false;
        }else if (b_led_step > b_max_step){
            b_sts = true;
        }
        analogWrite(led, b_led_step);
        b_last_time = uptime;
    }
}

//membuat format Log untuk serial print
//level =
//0 error
//1 warning
//2 info
//3 debug (default)
void ICACHE_FLASH_ATTR Log(String msg = "", int level = 3){
    
    Serial.print('[');
    Serial.print(millis());
    Serial.print(']');
    switch (level)
    {
    case 0:
        Serial.print("[error  ] ");
        break;
    case 1:
        Serial.print("[warning] ");
        break;
    case 2:
        Serial.print("[info   ] ");
        break;
    case 3:
        Serial.print("[debug  ] ");
        break;
    case 11:
        Serial.print("[       ] Wifi Ip Address : ");
        Serial.print(WiFi.localIP());
    default:
        Serial.print("[       ] ");
        break;
    }
    Serial.println(msg);
}

//mengambil dan mengolah id perangkat
String ICACHE_FLASH_ATTR gen_device_id(){
    return String(ESP.getChipId(),HEX).c_str();
}

//membuat dan memformat nama perangkat
String ICACHE_FLASH_ATTR gen_device_name(){
    String name;
    // name += gen_device_id();
    const char * dev_id = strdup(gen_device_id().c_str());
    name = strcat(DEVICE_NAME"-", dev_id);
    return name;
}

String ICACHE_FLASH_ATTR gen_mqtt_clientid(){
    String clientId = DEVICE_NAME"-";
    clientId += gen_device_id();
    return clientId;
}