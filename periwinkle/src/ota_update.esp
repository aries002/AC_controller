#include <ESP8266HTTPClient.h>
#include <ESP8266httpUpdate.h>

void ICACHE_FLASH_ATTR update_started() {
  Serial.println("OTA UPDATE CALLBACK:  HTTP update process started");
}

void ICACHE_FLASH_ATTR update_finished() {
  Serial.println("OTA UPDATE CALLBACK:  HTTP update process finished");
}

void ICACHE_FLASH_ATTR update_progress(int cur, int total) {
  Serial.printf("OTA UPDATE CALLBACK:  HTTP update process at %d of %d bytes...\n", cur, total);
}

void ICACHE_FLASH_ATTR update_error(int err) {
  Serial.printf("OTA UPDATE CALLBACK:  HTTP update fatal error code %d\n", err);
}

void ICACHE_FLASH_ATTR do_update(){
  WiFiClient client;
  // ESPhttpUpdate.setLedPin(LED_BUILTIN, LOW);
  // if(ota_server != NULL && firmware_file != NULL){}
  // Add optional callback notifiers
  ESPhttpUpdate.onStart(update_started);
  ESPhttpUpdate.onEnd(update_finished);
  ESPhttpUpdate.onProgress(update_progress);
  ESPhttpUpdate.onError(update_error);
  
  t_httpUpdate_return ret = ESPhttpUpdate.update(client, update_url);
  // Or:
  
  //t_httpUpdate_return ret = ESPhttpUpdate.update(client, ota_server, 80, firmware_file);
  switch (ret) {
    case HTTP_UPDATE_FAILED:
      Serial.printf("HTTP_UPDATE_FAILD Error (%d): %s\n", ESPhttpUpdate.getLastError(), ESPhttpUpdate.getLastErrorString().c_str());
      updating = false;
      break;

    case HTTP_UPDATE_NO_UPDATES:
      Serial.println("HTTP_UPDATE_NO_UPDATES");
      updating = false;
      break;

    case HTTP_UPDATE_OK:
      Serial.println("HTTP_UPDATE_OK");
      break;
  }
}