// #include <PZEM004Tv30.h>
// #include <Wire.h>
// #include "SparkFun_SHTC3.h"
bool req_signal_ac = false;


SHTC3 room_sensor;
SoftwareSerial pzemSWSerial(PZEM_RX, PZEM_TX);
PZEM004Tv30 pzem;

//Decode SHTC3 sensor error
String ICACHE_FLASH_ATTR SHTC3errorDecoder(SHTC3_Status_TypeDef message)
{
  String ret;
  switch(message)
  {
    case SHTC3_Status_Nominal : ret = "Nominal"; break;
    case SHTC3_Status_Error : ret = "Error"; break;
    case SHTC3_Status_CRC_Fail : ret = "CRC Fail"; break;
    default : ret = "Unknown return code"; break;
  }
  return ret;
}

//============================================================================================
//==================================AC CONTROLLER AND MONITOR=================================
//============================================================================================



// AC Controller function is for send power on signal


bool last_ac_status = false;
bool server_change = false;

unsigned long ac_controller_last_chek = 0;
unsigned long ac_controller_last_send_status = 0;

void ICACHE_FLASH_ATTR ac_controller(bool signal_now = false){
  if(signal_now){
    req_signal_ac = true;
  }
  else{
    float f_sensor_ac_status;
    if(sensor_ac_status){
      f_sensor_ac_status = 1;
    }else{
      f_sensor_ac_status = 0;
    }
    if(millis() - ac_controller_last_send_status >= 5000){
      iot_umsida_sender(FIELD_STATUS_AC, f_sensor_ac_status); //send status ac to server
      ac_controller_last_send_status = millis();
    }

    if((last_ac_status != sensor_ac_status) && allow_remote_power){ //jika kondisi ac berubah kirmkan perubahan ke server
      last_ac_status = sensor_ac_status;
      Serial.println("AC condition change!");
      if(!server_change){
        Serial.println("From other.");
        iot_umsida_sender(FIELD_COMMAND_AC, f_sensor_ac_status);
      }
      else{
        Serial.println("From Server.");
        server_change = false;
      }
    }
    else{ // jika tidak ambil status dari server
      if(millis() - ac_controller_last_chek > AC_CONTROLLER_CHECK_INTERVAL){
        String result = iot_umsida_get(FIELD_COMMAND_AC);
        Serial.print("AC Command : ");
        Serial.println(result);
        if ((result == "1" || result == "1.0")&& !sensor_ac_status){
          req_signal_ac = true;
          server_change = true;
        }
        else if ((result == "0" || result == "0.0") && sensor_ac_status){
          req_signal_ac = true;
          server_change = true;
        }
        ac_controller_last_chek = millis();
      }
    }
  }
}



unsigned int ac_read_timer = 0;
unsigned long sensor_ac_last_update = 0;
//read AC status from led ping 
void ICACHE_FLASH_ATTR update_sensor_ac(){
  bool sts = digitalRead(AC_STATUS_PIN);
  if(millis() - sensor_ac_last_update >= 200){
    if(sts){
      ac_read_timer = 0;
      sensor_ac_status = true;
    }
    else if(!sts && ac_read_timer <= AC_READ_TIMEOUT){
      ac_read_timer+=200;
    }
    else{
      sensor_ac_status = false;
    }
  }
}
//============================================================================================


//============================================================================================
//============================================================================================
//============================================================================================

//updating sensor data
void ICACHE_FLASH_ATTR update_sensor(){
  Log("Updating sensor value");
  SHTC3_Status_TypeDef result = room_sensor.update();
  if(room_sensor.lastStatus == SHTC3_Status_Nominal){
    sensor_room_temp = room_sensor.toDegC();
    sensor_room_humid = room_sensor.toPercent();
  }
  else{
    Log("Kesalahan mengukur suhu.",1);
    Log(SHTC3errorDecoder(result),1);
  }

  float tmp_sensor_tegangan = pzem.voltage();
  float tmp_sensor_arus = pzem.current();
  float tmp_sensor_daya = pzem.power();
  float tmp_sensor_pf = pzem.pf();
  float tmp_sensor_kwh = pzem.energy();

  if(isnan(tmp_sensor_tegangan) || isnan(tmp_sensor_arus) || isnan(tmp_sensor_daya) || isnan(tmp_sensor_pf) || isnan(tmp_sensor_kwh)){
    Log("Kesalahan membaca sensor listrik",1);
  }else{
    sensor_listrik_voltage = tmp_sensor_tegangan;
    sensor_listrik_current = tmp_sensor_arus;
    sensor_listrik_power = tmp_sensor_daya;
    sensor_listrik_pf = tmp_sensor_pf;
    sensor_listrik_kwh = tmp_sensor_kwh;
  }
}


//create json formated data from sensor
String ICACHE_FLASH_ATTR get_sensor_json(String sensor_name = "all", bool update_now = true){
  String data;
  if(update_now){
    update_sensor();
  }
  StaticJsonBuffer<256> buffer;
  JsonObject& root = buffer.createObject();
  // Log("test3");
  if(sensor_name == "ruang"){
    root["temperatur"] = sensor_room_temp;
    root["kelembapan"] = sensor_room_humid;
    root["status"] = "ok";
  }
  else if(sensor_name == "listrik"){
    // Log("test 1");
    root["tegangan"] = sensor_listrik_voltage;
    root["arus"] = sensor_listrik_current;
    root["daya"] = sensor_listrik_power;
    root["pf"] = sensor_listrik_pf;
    root["frekuensi"] = sensor_listrik_freq;
    root["kwh"] = sensor_listrik_kwh;
    root["status"] = "ok";
    // Log("Test 2");
  }
  else if(sensor_name == "all"){
    JsonObject& room = buffer.createObject();
    JsonObject& electric = buffer.createObject();
    electric["tegangan"] = sensor_listrik_voltage;
    electric["arus"] = sensor_listrik_current;
    electric["daya"] = sensor_listrik_power;
    electric["frekuensi"] = sensor_listrik_freq;
    electric["pf"] = sensor_listrik_pf;
    electric["kwh"] = sensor_listrik_kwh;
    room["temperatur"] = sensor_room_temp;
    room["kelembapan"] = sensor_room_humid;
    root["listrik"] = electric;
    root["ruangan"] = room;
    root["ac_status"] = sensor_ac_status;
    root["status"] = "ok";
  }
  else{
    root["pesan"] = "sensor tidak diketahui";
    root["status"] = "error";
  }
  root.printTo(data);
  // return root;
  return data;
}
//============================================================================================


//============================================================================================
//============================================================================================
//============================================================================================

//send sensor data to server
void ICACHE_FLASH_ATTR sensor_data_sender(){
  if (net_status) {
      //sensor suhu
      iot_umsida_sender(FIELD_SENSOR_SUHU, sensor_room_temp);
      //sensor kelembapan
      iot_umsida_sender(FIELD_SENSOR_KELEMBAPAN, sensor_room_humid);
      //sensor tegangan listrik
      iot_umsida_sender(FIELD_SENSOR_TEGANGAN, sensor_listrik_voltage);
      //sensor arus listrik
      iot_umsida_sender(FIELD_SENSOR_ARUS, sensor_listrik_current);
      //sensor daya
      iot_umsida_sender(FIELD_SENSOR_DAYA, sensor_listrik_power);
      // http_data_sender(data_sensor);
      // check ac command
      
  }
}

//============================================================================================


//============================================================================================
//============================================================================================
//============================================================================================


//prepare sensor before running
void ICACHE_FLASH_ATTR sensor_setup(){
  Log("Setup sensor");
  pinMode(AC_POWER_PIN, OUTPUT);
  pinMode(AC_STATUS_PIN, INPUT);
  digitalWrite(AC_POWER_PIN, HIGH);
  Wire.begin(I2C_SDA,I2C_SCL);
  pzem = PZEM004Tv30(pzemSWSerial);
  if(!room_sensor.begin()){
    Log("Sensor SHTC gagal dimuat",1);
  }
}


//Send data sensor to server
unsigned long sensor_last_update = 0;

//sensor loop process
void sensor_loop(){
  update_sensor_ac();
  ac_controller();
  if (req_signal_ac)
  {
    digitalWrite(AC_POWER_PIN, LOW);
    delay(500);
    req_signal_ac = false;
    digitalWrite(AC_POWER_PIN, HIGH);
  }

  if(millis() - sensor_last_update > SENSOR_UPDATE_INTERVAL){
    update_sensor(); //update sensor data
    sensor_data_sender(); //send sensor data
    sensor_last_update = millis();
  }
}

//============================================================================================
