// #include <Arduino.h>
#include <Wire.h>
// #include "DHT.h"
#include <PZEM004Tv30.h>
// #include "Adafruit_SHTC3.h"
#include "SparkFun_SHTC3.h"

float sensor_room_temp;
float sensor_room_humid;
float sensor_listrik_voltage;
float sensor_listrik_power;
float sensor_listrik_current;
float sensor_listrik_pf;
float sensor_listrik_freq;

unsigned int ac_read_timer = 0;

SHTC3 room_sensor;
// Adafruit_SHTC3 room_sensor = Adafruit_SHTC3();
// DHT dht(DHT_PIN, DHT_TYPE)
SoftwareSerial pzemSWSerial(PZEM_RX, PZEM_TX);
PZEM004Tv30 pzem;

void update_sensor_listrik();
void SHTC3errorDecoder(SHTC3_Status_TypeDef message);

void ICACHE_FLASH_ATTR SHTC3errorDecoder(SHTC3_Status_TypeDef message)
{
  switch(message)
  {
    case SHTC3_Status_Nominal : Serial.print("Nominal"); break;
    case SHTC3_Status_Error : Serial.print("Error"); break;
    case SHTC3_Status_CRC_Fail : Serial.print("CRC Fail"); break;
    default : Serial.print("Unknown return code"); break;
  }
}

/*
AC Controller function is for send power signal 
*/
unsigned long ac_controller_last_run = 0;
unsigned long ac_controller_run_interval = 0;
void ICACHE_FLASH_ATTR ac_controller(bool signal_now = false){
  if(uptime - ac_controller_last_run >= ac_controller_run_interval){
    ac_controller_last_run = uptime;
    if(sensor_ac_status != sensor_ac_command){
      digitalWrite(AC_POWER_PIN, HIGH);
      delay(AC_POWER_SIGNAL_LONG);
      digitalWrite(AC_POWER_PIN, LOW);
    }
  }
  else if(signal_now){
    // flip the command immidietly
    if(sensor_ac_command){
      sensor_ac_command = false;
    }else{
      sensor_ac_command = true;
    }
    // send the signal
    digitalWrite(AC_POWER_PIN, HIGH);
    delay(AC_POWER_SIGNAL_LONG);
    digitalWrite(AC_POWER_PIN, LOW);
  }
}

unsigned long sensor_ac_last_update = 0;
//read AC status its
void IRAM_ATTR update_sensor_ac(){
  bool sts = digitalRead(AC_STATUS_PIN);
  if(uptime - sensor_ac_last_update >= 200){
    if(sts){
      ac_read_timer = 0;
      sensor_ac_status = true;
    }
    else if(!sts && ac_read_timer <= AC_READ_TIMEOUT){
      ac_read_timer+=200;
    }
    else{
      sensor_ac_status = false;
    }
  }
}


//read room hummidity
float IRAM_ATTR read_room_temp(){
  float hasil = 0.0;
  if(room_sensor.lastStatus == SHTC3_Status_Nominal){
    hasil = room_sensor.toDegC();
  }else{
    Log("Kesalahan mengukur suhu",1);
    SHTC3errorDecoder(room_sensor.lastStatus);
    hasil = 0.0;
  }
  // hasil = dht.readTemperature();
  // Log("temp : "+String(hasil));
  return hasil;
}

//read room temperature
float IRAM_ATTR read_room_humid(){
  float hasil = 0.0;
  if(room_sensor.lastStatus == SHTC3_Status_Nominal){
    hasil = room_sensor.toPercent();
  }else{
    Log("Kesalahan mengukur kelembapan",1);
    SHTC3errorDecoder(room_sensor.lastStatus);
    hasil = 0.0;
  }
  // Log("Humidity : "+String(hasil));
  return hasil;
}

//get power line voltage
float IRAM_ATTR read_pzem_voltage(){
  // Log("Reading Voltage");
  float hasil = pzem.voltage();
  if(isnan(hasil)){
    Log("Kesalahan membaca tegangan", 1);
    return 0.0;
  }else{
    return hasil;
  }
}

//get electric current
float IRAM_ATTR read_pzem_current(){
  float hasil = pzem.current();
  if(isnan(hasil)){
    Log("Kesalahan membaca arus", 1);
    return 0.0;
  }else{
    return hasil;
  }
}

//get true power from AC
float IRAM_ATTR read_pzem_power(){
  float hasil = pzem.power();
  if(isnan(hasil)){
    Log("Kesalahan membaca daya", 1);
    return 0.0;
  }else{
    return hasil;
  }
}

//get power line frequency
float IRAM_ATTR read_pzem_frequency(){
  float hasil = pzem.frequency();
  if(isnan(hasil)){
    Log("Kesalahan membaca frequensi", 1);
    return 0.0;
  }else{
    return hasil;
  }
}

//get power factor of power line
float IRAM_ATTR read_pzem_pf(){
  float hasil = pzem.pf();
  if(isnan(hasil)){
    Log("Kesalahan membaca power factor", 1);
    return 0.0;
  }else{
    return hasil;
  }
}

void ICACHE_FLASH_ATTR sensor_setup(){
  Log("Setup sensor");
  pinMode(AC_POWER_PIN, OUTPUT);
  pinMode(AC_STATUS_PIN, INPUT);
  Wire.begin();
  pzem = PZEM004Tv30(pzemSWSerial);
  ac_controller_run_interval = AC_CONTOLLLER_RUN_INTERVAL * 60 * 1000;
  if(!room_sensor.begin()){
    Log("Sensor SHTC gagal dimuat",1);
  }
}


void IRAM_ATTR update_sensor(){
    SHTC3_Status_TypeDef result = room_sensor.update();
    sensor_room_humid = read_room_humid();
    sensor_room_temp = read_room_temp();
    sensor_listrik_voltage = read_pzem_voltage();
    sensor_listrik_power = read_pzem_power();
    sensor_listrik_current = read_pzem_current();
    sensor_listrik_freq = read_pzem_frequency();
    sensor_listrik_pf = read_pzem_pf();
}
// String serverName = "http://192.168.1.106:1880/update-sensor";

//Send data sensor to server
void ICACHE_FLASH_ATTR sensor_data_sender(){
  String server_path = "http://"+String(controller_host)+"/"+sensor_updater_path;
  WiFiClient wifi_client;
  HTTPClient http;

  //data sensor yang dikirim
  String data_sensor = "?";
  data_sensor += "temperatur="+String(sensor_room_temp)+"&";
  data_sensor += "kelembapan="+String(sensor_room_humid)+"&";
  data_sensor += "listrik_volt="+String(sensor_listrik_voltage)+"&";
  data_sensor += "listrik_amp="+String(sensor_listrik_current)+"&";
  data_sensor += "status_ac"+String(sensor_ac_status);

  String serverPath = server_path + data_sensor;
  
  //send data
  http.begin(wifi_client, serverPath.c_str());
  int httpResponseCode = http.GET();
  if (httpResponseCode>0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    String payload = http.getString();
    Serial.println(payload);
  }
  else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  // Free resources
  http.end();

}

String ICACHE_FLASH_ATTR get_sensor_json(String sensor_name, bool update_now = false){
  String data;
  if(update_now){
    update_sensor();
  }
  StaticJsonBuffer<256> buffer;
  JsonObject& root = buffer.createObject();
  // Log("test3");
  if(sensor_name == "ruang"){
    root["temperatur"] = sensor_room_temp;
    root["kelembapan"] = sensor_room_humid;
    root["status"] = "ok";
  }
  else if(sensor_name == "listrik"){
    // Log("test 1");
    root["tegangan"] = sensor_listrik_voltage;
    root["arus"] = sensor_listrik_current;
    root["daya"] = sensor_listrik_power;
    root["pf"] = sensor_listrik_pf;
    root["frekuensi"] = sensor_listrik_freq;
    root["status"] = "ok";
    // Log("Test 2");
  }
  else if(sensor_name == "all"){
    JsonObject& room = buffer.createObject();
    JsonObject& electric = buffer.createObject();
    electric["tegangan"] = sensor_listrik_voltage;
    electric["arus"] = sensor_listrik_current;
    electric["daya"] = sensor_listrik_power;
    electric["frekuensi"] = sensor_listrik_freq;
    electric["pf"] = sensor_listrik_pf;
    room["temperatur"] = sensor_room_temp;
    room["kelembapan"] = sensor_room_humid;
    root["listrik"] = electric;
    root["ruangan"] = room;
    root["ac_status"] = sensor_ac_status;
    root["status"] = "ok";
  }
  else{
    root["pesan"] = "sensor tidak diketahui";
    root["status"] = "error";
  }
  root.printTo(data);
  // return root;
  return data;
}